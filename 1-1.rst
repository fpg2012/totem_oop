.. header-n0:

面向对象初步
============

.. tip:: 

    这部分是基础的面向对象，私以为是最重要的部分。

.. header-n5:

定义和使用类/结构体
-------------------

在讲定义和使用前，我先按照我的理解解释一下为什么要有类(class)和结构体(struct)。
假设你正在写一个学生管理程序，每个学生都有自己的姓名、性别、籍贯、电话号码、历次的考试成绩……一堆东西，于是你的代码写起来会是这个样子的：

.. code:: c++

    // 只展示有用的部分

    // 学生最大数量
    constexpr int kMax = 10000;
    // 姓名，电话和籍贯
    std::vector<std::string> name, tel, birthplace;
    // 历次考试成绩
    std::vector<std::vector<double> > results;
    // 性别，不要使用vector<bool>，这是个坑！vector<bool>不是标准库容器，详情自行搜索
    bool sex[kMax];

    // 输出第i个学生的名字等信息
    printf("姓名: %s\n电话: %s\n籍贯: %s", name[i].c_str(), tel[i].c_str(), birthplace[i].c_str());

这样写似乎能够应付只是简单存储的情况。但是，如果你要按照名字字典序给学生们排序，那就很蛋疼了（并不是做不到，而是没有必要那样做）。

于是，出现了结构体来应付这种情况，上面的代码可以写成下面那样

.. code:: c++


    // 使用struct关键字定义一个Student结构体，这个Student是我们自己定义的类型
    // 强调！struct后面的分号一定不能漏！！！
    struct Student {
      std::string name, tel, birthplace;
      std::vector<double> results;
      bool sex;
    }; // ←_← 就是这个分号

    std::vector<Student> students;

    // 跟前面一样
    printf("姓名: %s\n", students[i].name.c_str());
    // 排序，要先定义一下比较的谓词cmp，这里不赘述，假设已经定义好了
    std::sort(students.begin(), students.end(), cmp);

..

.. warning:: 

    结构体定义后面的分号一定不能漏。大家可以故意漏写一次看看会报什么错。

..
.. note:: 

    cmp的定义如下

    .. code:: c++

        bool cmp(Student a, Student b) { return a.name < b.name; }

大家应该已经注意到了，结构体将各种不同的数据“结合”在了一起，构成了一个新的类型\ ``Student``\ 。我们可以像内置类型一样定义自己的\ ``Student``\ 变量，一个\ ``Student``\ 变量就是一个\ ``Student``\ 类型的实例。使用点操作符可以访问结构体中的某个成员(member)。上面用到的成员都是数据成员，数据成员也叫属性(attribute)。成员使用"``.``"操作符来访问。属性访问起来跟普通的变量没什么区别。例子在下面。

.. code:: c++

    // 定义一个Student变量
    Student student_a;
    // 输入一个名字，标准库string类型不要用scanf
    cin >> student_a.name;
    // 获取它的name
    std::string name_a = student_a.name;
    // 改变它的tel
    student_a.tel = "10086";

使用结构体相比使用一大堆数组，思路更加清晰和自然。

但是，现在出现了新的问题。

我们知道，学生的results属性中保存的是学生多次考试的成绩（假设这个学生只学一个科目233），现在校领导想获得每个学生的平均分。有些人也许会这样实现：

.. code:: c++

    // ...

    // 返回学生的平均分
    double getAverage(Student student) {
      double sum = 0;
      for(auto marks : student.results) {
        sum += marks;
      }
      auto beg = student.results.begin(), end = student.result.end();
      return sum / (end - beg);
    }

    // ...

    // 输出所有学生的平均分
    for(auto stu : students) {
      printf("%s的平均分: %lf\n", stu.name.c_str(), getAverage(stu));
    }

    // ...

这样做看起来在小程序中还不错，但是在C++中，有更好更自然的方法

.. code:: c++

    struct Student {
      // ... 和前面一样
      double getAverage() {
          // ... 不再赘述
      }
    };

    // ...

    // 获取一个名为stu的Student变量的平均分
    stu.getAverage();

    // ...

..

    这个例子只是为了引入，大家看看就好，Google的代码风格要求在\ **只有**\ 数据成员时才使用结构体，否则使用class。我们后面会讲

我们在结构体中定义了\ ``getAverage()``\ 函数，这个函数也是结构体的成员，叫做成员函数，也叫方法(method)。

用类也可以做到上面的效果，事实上struct定义的结构体也是类。类的定义使用\ ``class``\ 关键字。\ ``public:``\ 表示以下的部分可以被外部访问，\ ``private``\ 表示以下成员只能被类的其他成员访问。struct中默认都是
``public``\ 的，而class则默认是\ ``private``\ 的。

.. code:: c++

    class Student {
     public:
      // ... 和前面一样
      double getAverage() {
          // ... 不再赘述
      }
     private:
      std::string favorate_book;
    };

    Student temp;
    std::string temp_str = temp.favorate_book; // 错误
    temp.favorate_book = "Nineteen Eighty-four"; // 错误

.. header-n44:

关于类和结构体声明和定义的位置
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

声明和定义一般都放在头文件(header
files)中，也就是\ ``*.h``\ 文件。类的成员的定义却要放在源文件中(source
files)，即\ ``.cc``/``.cpp``/``.cxx``\ 文件中（谷歌的风格使用\ ``.cc``\ ）。下面举个例子。(
ps. 后面为了演示方便示例代码可能不会这样写

foo.h中

.. code:: c++

    #ifndef FOO_H
    #define FOO_H

    #include <string>

    namespace Project {

    class Foo {
     public:
      int bar();
     private:
      int a_, b_, c_;
      std::string d_;
    };

    }
    #endif

foo.cc中
	
.. code:: c++

    #include "foo.h"

    int Project::Foo::bar() {
      // ...
      // ...
      // ...
    }

..
.. note:: 

    Google的代码风格要求把所有的数据成员定义为
    ``private``\ 的，并且在数据成员标识符后面加上"``_``"。

.. header-n51:

构造函数和析构函数初探
----------------------

.. header-n52:

构造函数
~~~~~~~~

前面已经初步提到了类的\ ``public``\ 部分和\ ``private``\ 部分。现在我们想要在一开始就给某个\ ``Student``\ 对象赋予其名字。我们可以使用构造函数(constructor)。在使用\ ``Student``\ 做例子之前，先看一个更简单的例子。

.. code:: c++

    class Foo {
     public:
      // 这就是构造函数
      Foo(int a, int b, int c, std::string d) : a_(a), b_(b), c_(c), d_(d) { printf("Constructor!\n"); }
      const int getA() { return a_; }
      // ... BCD略
      void setA(const int a) { a_ = a; }
      // ... BCD略

     private:
      int a_, b_, c_;
      std::string d_;
    };

    // 定义一个Foo类型的变量
    Foo foo(233, 2333, 666, "8964"); // 这里调用完后会输出 Constructor!
    foo.getA(); // 结果为233
    foo.getB(); // 结果为2333
    foo.getC(); // 结果为666
    foo.getD(); // 结果为"8964"

很明显，\ ``Foo()``\ 就是我们的构造函数。构造函数后面那一串东西叫做初始化列表。例如\ ``a_(a)``\ 的意思就是把构造函数参数\ ``a``\ 赋给当前对象的属性\ ``a_``\ 。我们在初始化时利用变量标识符后面那一串括号来调用构造函数。

.. note:: 

    这个例子中函数的定义照理说应该放在源文件中，而不是和类一起放在头文件里。由于我们把每个数据成员都定义为\ ``private``\ 的，所以如果需要在类外读取，只好定义一个名为\ ``getXXX()``\ 的成员函数来实现。同理，如果要在类外修改，只好定义一个名为\ ``setXXX()``\ 的成员函数来实现。这叫做存取控制，也叫封装。

.. header-n61:

拷贝构造函数
~~~~~~~~~~~~

拷贝构造函数其实非常简单，就是用一个同类型的对象来构造自己，例如

.. code:: c++

    class Foo {
      // ...
      // 我们的拷贝构造函数，一般这样放着就行了
      Foo(const Foo&);
      // ...
    };

    Foo foo1(233, 2333, 666, "sb");
    Foo foo2(foo1);
    foo2.getD() // 结果为sb

.. header-n65:

析构函数
~~~~~~~~

析构函数(destructor)，顾名思义，就是在对象被析构的时候调用的。它可以进行一些“善后”的操作。但是到现在为止我写过的析构函数要么是空的，要么\ ``= default``\ 

还是上面那个例子，在上面那段代码的构造函数后面加上一行：

.. code:: c++

    // 使用编译器自动合成的构造函数
    Foo() = default;
    // 这就是析构函数
    ~Foo() { printf("Destructor!\n"); }

然后这样用

.. code:: c++

    for(int i = 0;i < 5;++i) {
      Foo temp;
    }

就能看到输出是这样的

.. code:: 

    Destructor!
    Destructor!
    Destructor!
    Destructor!
    Destructor!

由于变量每次离开作用域都要被析构一次，循环了5次，所以调用了五次析构函数。这也是为什么Google的代码风格要求：如果是在循环中的这种临时的类对象，最好放在循环体外面——放在里面的话，要调用好多次析构函数，十分浪费时间。

.. note:: 

    关于给\ ``Student``\ 类定义构造函数和析构函数，留给读者自己实现。构造函数和析构函数我们过后还会再涉及。

.. header-n82:

访问控制与友元
--------------

.. header-n83:

访问控制
~~~~~~~~

访问控制之前已经提到过了，就是\ ``public``/``private``\ 这些的。当然还有一个\ ``protected``\ ，这个我们以后再提。

.. warning::

    这里必须强调一下，如果一个成员函数只会在类中被调用，请定义成\ ``private``\ 。数据成员全部定义为私有，并进行访问控制。不要把所有东西都丢到\ ``public``\ 里面去。

.. header-n89:

友元
~~~~

有的时候我们会碰到一种情况，必须让少数类外的函数能够访问类的\ ``private``\ 部分。这个时候就需要用到友元(friend)了。

友员函数声明，就是声明允许某个非成员函数访问类的的\ ``private``\部分。

声明友元使用\ ``friend``\ 关键字。

.. code:: c++

    class Foo {
      // ...
      // 友元声明
      friend bool compare1(const Foo a, const Foo b);
      // ...
    };
	
foo.cc的某处

.. code:: c++
    
	// 以下分别是对compare1与compare2的定义，不难看出两个函数实际上是一样的
	// 差别在与compare1有在类中进行友元声明，而compare2没有
    Project::compare1(const Foo a, const Foo b) {
      return a.a_ + a.b_ > b.a_ + b.b_;
    }
    Project::compare2(const Foo a, const Foo b) {
      return a.a_ + a.b_ > b.a_ + b.b_;
    }

main.cc的某处，我们在这里使用compare1和compare2

.. code:: c++
	
	// 定义两个Foo变量
	Foo a(233, 666, 8964, "sb"), b(0, 0, 0, "aaa");
	// 这里我们使用compare
	compare1(a, b); // 没有错误，由于233 + 666 > 0 + 0，所以结果为true
	compare2(a, b); // 错误，这个函数根本没有办法读取a和b的私有部分
	
..

.. note::

    ps. 这个例子举的不好，大家只要明白友元怎么用就行了。

.. note:: 

    什么东西都不能滥用。我相信应该没有人会把一个类所有的成员都定义成私有的，然后再声明一堆朋友233

.. header-n101:

题外话：封装的好处
~~~~~~~~~~~~~~~~~~

直接引用C++ Primer

    封装有两个重要的优点：

    -  确保用户代码不会无意间破坏封装对象的状态。

    -  被封装的类具体实现可以随时改变，而无须调整用户级别的代码

